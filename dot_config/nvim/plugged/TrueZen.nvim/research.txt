


This is what Goyo does:
	+ Toggle status line:
		+,i set laststatus=0 showtabline=0
			hide the status line
		+,i set laststatus=2 showtabline=2
			show statusline
	+ Toggle ruler
		+,i set ruler
			show ruler
		+
	+ Change window
		+,i
			set winminheight=1
			set winheight=1
			set winminwidth=1 winwidth=1
			set laststatus=0
			set showtabline=0
			set noruler
			set fillchars+=vert:\
			set fillchars+=stl:\
			set fillchars+=stlnc:\

	+ Hide left hand scroll bars if any on GUI
		+,i
			if has('gui_running')
				set guioptions-=l
				set guioptions-=L
			endif


how centering text works:
	1. create two splits on the sides (https://superuser.com/questions/537584/in-vim-how-to-move-text-to-be-edited-to-the-middle-of-the-window)
		You could have empty windows on the left and right of the one you're editing:
			:leftabove vnew			for creating split in the left
			:wincmd l				move to split in the left
			:vnew					for creating split in the right
			:wincmd h				for moving to the split in the left (center)

		remember that before moving to other splits run the following command and also execute TZMinimalist
			:setlocal buftype=nofile bufhidden=wipe nomodifiable nobuflisted noswapfile nocursorline nocursorcolumn

		for every buffer on each side do:
			1. create it `:leftabove vnew			for creating split in the left`
			3. set size width `:vertical resize 60`
			4. disable all external stuff `:setlocal buftype=nofile bufhidden=wipe nomodifiable nobuflisted noswapfile nocursorline nocursorcolumn nonumber norelativenumber noruler noshowmode noshowcmd laststatus=0`


	2. resize those splits (:vertical resize <num>) https://vi.stackexchange.com/questions/514/how-do-i-change-the-current-splits-width-and-height/518
	3. prevent window from resizing `:set noequalalways`
	4. hide border chars with (based on goyo)
		set fillchars+=vert:\
		set fillchars+=stl:\
		set fillchars+=stlnc:\
	5. execute minimalist mode on all of the splits
	6. avoid buffers from being modifiable (https://github.com/junegunn/goyo.vim/blob/master/autoload/goyo.vim#L51)
	7. `:vertical resize 80` will set your current vsplit to 80 characters wide
	8. after untoggled quit all buffers


after left and right splits are set, check if bottom split setting = 0, if so, do nothing, else create split on top with that margin set:
	1. leftabove new.
	2. resize #
	2. do settings stuff
	3. :wincmd j to return to main screen



IMPORTANT:

how to hide statusline for onces and for all:
	:set statusline=-        " hide file name in statusline
	Hide its colors if any after being removed:
		:highlight StatusLine ctermfg=bg ctermbg=bg guibg=bg guifg=bg
hide horizontal fillchars:
	:highlight StatusLineNC ctermfg=bg ctermbg=bg guibg=bg guifg=bg


refer to this thread: https://vi.stackexchange.com/questions/14217/how-to-hide-horizontal-line-between-windows




if I want to make add a do_it_for_me_setting for the paddings, in order of exection I'll have to:

	0. check if mode is enabled
	1. get current window width
	2. get current window height
	3. vertical resize #

For the zoom (focus?) mode:

Focus the window:
	1. vert resize | resize
	2. normal! ze

Unfocus the window:
	1. wincmd =
	2. normal! ze


To get current win size:
	1. winrestcmd()



Things to refactor:
1. Settings: simplify them and categorize them properly
2. Modes:
	+ Focus: can be kept as it is
	+ Minimalist: simplify it
	+ Ataraxis: to avoid worrying about shown_ ui elements, just use `tabe %`


IDEAS:


1. Since in order of abstraction:

UI Elements -> Minimalist mode -> Ataraxis mode

it makes sense to do a BufDo for every UI element so that there will be some sord of consistency, and then Minimalist will just be a switch between all of them, but also exiting vim and reentering it should something to worry about.

2. Add some sort of "persistent topbar" that will prevent plugins like bufferline to show the statusline when a another file is opened when TOP ui  = off. Maybe an integration will be enough?

3. Make it so that Ataraxis mode won't break even when other windows are opened

Code for every UI element:
+ On/Off funcs: toggle
+ main menu to assert todo:
+ events func: handles events (VimEnter, FocusGained, etc...)


while under dev note:
1. UI:
	+ the settings for both the BOTTOM and the TOP ui elements apply to every buffer, but the LEFT doesn't
	+ BOTTOM: most important setting is 'laststatus'
	+ TOP: most important setting is 'showtabline'

2. Ataraxis mode:

In order for ataraxis mode to do what is does, in order of execution it should:
	0. preparation
	1. run minimalist on()
	2. generate box
	3. load integrations






For ataraxis:
Now we need to store and windows that have the main contents so that resume() will grab the id of every window in the current buffer and check if it exists in the table, if it does go to that buffer and compare sizes.



The best way to restore the layout is to save it as soon as the layout is set with

let g:my_layout = winrestcmd()

and then restore it with:

execute g:my_layout


new solution:
1. after leyout() do let g:my_layout = winrestcmd()
2. in resume() if current buff has b:truezen_buffer
	2.1 compare g:my_layout with g:local_layout, if same then do nothing, else `execute g:my_layout`
3. go to only modifiable buffer
